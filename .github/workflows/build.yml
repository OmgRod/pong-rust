name: Build, Package, and Release Rust Application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies for building
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev build-essential mingw-w64 libasound2-dev  # Required dependencies for Windows cross-compilation on Linux
        sudo apt-get install -y pkg-config  # For macOS

    # Install macOS target on Ubuntu
    - name: Install macOS target
      if: runner.os == 'ubuntu'
      run: rustup target add x86_64-apple-darwin

    # Build project for the appropriate target based on OS
    - name: Build project
      run: |
        if [ $RUNNER_OS == 'Linux' ]; then
          cargo build --release --target x86_64-unknown-linux-gnu
        elif [ $RUNNER_OS == 'Windows' ]; then
          cargo build --release --target x86_64-pc-windows-msvc
        elif [ $RUNNER_OS == 'macOS' ]; then
          cargo build --release --target x86_64-apple-darwin
        fi

    # Package for Windows using NSIS
    - name: Package for Windows using NSIS
      if: runner.os == 'Windows'
      run: |
        choco install nsis  # Install NSIS
        nsis ./scripts/installer.nsi  # Use an NSIS script to package the application into an installer

    # Package for macOS using pkg
    - name: Package for macOS using pkg
      if: runner.os == 'macos'
      run: |
        brew install pkg-config  # Install necessary packages
        pkgbuild --identifier com.example.yourapp --version 1.0 --install-location /Applications ./pkg/YourApp.pkg ./target/x86_64-apple-darwin/release/your-app

    # Package for Linux into a tarball
    - name: Package for Linux (tarball)
      if: runner.os == 'Linux'
      run: |
        mkdir -p ./pkg/linux
        cp ./target/x86_64-unknown-linux-gnu/release/your-app ./pkg/linux/
        tar -czvf ./pkg/your-app-linux.tar.gz -C ./pkg linux/

    # Upload installers to GitHub Releases
    - name: Upload Installers to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./target/x86_64-pc-windows-msvc/release/your-app-installer.exe
          ./pkg/YourApp.pkg
          ./pkg/your-app-linux.tar.gz  # Linux tarball included here
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optionally: Run tests after the build step
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies for testing
        run: sudo apt-get install -y pkg-config libssl-dev

      - name: Run tests
        run: cargo test --verbose
